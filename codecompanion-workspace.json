{
  "name": "utilize-schema-workspace",
  "version": "1.0.0",
  "system_prompt": "You are an expert TypeScript monorepo assistant. Write code and code comments in English.",
  "groups": [
    {
      "name": "core libraries & tests",
      "system_prompt": "You are an expert on the core logic and tests of both @utilize/json-schema and @utilize/zod libraries. Be critical, realistic, and provide guidance for long-term maintainability. Code and comments must be in English.",
      "data": [
        "json-schema-src-index",
        "json-schema-src-linker",
        "json-schema-src-model",
        "json-schema-src-parser",
        "json-schema-src-utils",
        "json-schema-test-parser",
        "zod-src-collectStandaloneSchemas",
        "zod-src-compile",
        "zod-src-generator",
        "zod-src-index",
        "zod-src-resolveName",
        "zod-src-utils",
        "zod-src-generators-allOfGenerator",
        "zod-src-generators-anyGenerator",
        "zod-src-generators-anyOfGenerator",
        "zod-src-generators-arrayGenerator",
        "zod-src-generators-booleanGenerator",
        "zod-src-generators-createGenerator",
        "zod-src-generators-enumGenerator",
        "zod-src-generators-generateSchema",
        "zod-src-generators-literalGenerator",
        "zod-src-generators-multipleTypeGenerator",
        "zod-src-generators-nullGenerator",
        "zod-src-generators-numberGenerator",
        "zod-src-generators-objectGenerator",
        "zod-src-generators-oneOfGenerator",
        "zod-src-generators-recordGenerator",
        "zod-src-generators-refGenerator",
        "zod-src-generators-selectGenerator",
        "zod-src-generators-stringGenerator",
        "zod-src-generators-tupleGenerator",
        "zod-src-generators-types",
        "zod-test-codegen",
        "zod-test-collectStandaloneSchemas",
        "zod-test-combination",
        "zod-test-meta",
        "zod-test-number",
        "zod-test-object",
        "zod-test-reference",
        "zod-test-resolveName",
        "zod-test-setup",
        "zod-test-string",
        "zod-test-test-utils",
        "zod-test-type",
        "zod-test-vitest-dts",
        "zod-test-snapshots-Example-generated"
      ]
    }
  ],
  "data": {
    "json-schema-src-index": {
      "type": "file",
      "path": "packages/json-schema/src/index.ts",
      "description": "Entry point for @utilize/json-schema library. Exports main API."
    },
    "json-schema-src-linker": {
      "type": "file",
      "path": "packages/json-schema/src/linker.ts",
      "description": "Handles $ref resolution and linking for JSON Schema documents."
    },
    "json-schema-src-model": {
      "type": "file",
      "path": "packages/json-schema/src/model.ts",
      "description": "Core data models and types for JSON Schema processing."
    },
    "json-schema-src-parser": {
      "type": "file",
      "path": "packages/json-schema/src/parser.ts",
      "description": "Parses JSON Schema files and prepares them for linking and validation."
    },
    "json-schema-src-utils": {
      "type": "file",
      "path": "packages/json-schema/src/utils.ts",
      "description": "Utility functions for JSON Schema processing."
    },
    "json-schema-test-parser": {
      "type": "file",
      "path": "packages/json-schema/test/parser.test.ts",
      "description": "Tests for JSON Schema parser and related logic."
    },
    "zod-src-collectStandaloneSchemas": {
      "type": "file",
      "path": "packages/zod/src/collectStandaloneSchemas.ts",
      "description": "Collects standalone Zod schemas from JSON Schema input."
    },
    "zod-src-compile": {
      "type": "file",
      "path": "packages/zod/src/compile.ts",
      "description": "Compiles JSON Schema to Zod schema."
    },
    "zod-src-generator": {
      "type": "file",
      "path": "packages/zod/src/generator.ts",
      "description": "Main generator logic for Zod schemas."
    },
    "zod-src-index": {
      "type": "file",
      "path": "packages/zod/src/index.ts",
      "description": "Entry point for @utilize/zod library. Exports main API."
    },
    "zod-src-resolveName": {
      "type": "file",
      "path": "packages/zod/src/resolveName.ts",
      "description": "Resolves names for generated Zod schemas and types."
    },
    "zod-src-utils": {
      "type": "file",
      "path": "packages/zod/src/utils.ts",
      "description": "Utility functions for Zod schema generation."
    },
    "zod-src-generators-allOfGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/allOfGenerator.ts",
      "description": "Handles 'allOf' keyword in JSON Schema to Zod conversion."
    },
    "zod-src-generators-anyGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/anyGenerator.ts",
      "description": "Handles 'any' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-anyOfGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/anyOfGenerator.ts",
      "description": "Handles 'anyOf' keyword in JSON Schema to Zod conversion."
    },
    "zod-src-generators-arrayGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/arrayGenerator.ts",
      "description": "Handles 'array' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-booleanGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/booleanGenerator.ts",
      "description": "Handles 'boolean' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-createGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/createGenerator.ts",
      "description": "Factory for creating Zod schema generators."
    },
    "zod-src-generators-enumGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/enumGenerator.ts",
      "description": "Handles 'enum' keyword in JSON Schema to Zod conversion."
    },
    "zod-src-generators-generateSchema": {
      "type": "file",
      "path": "packages/zod/src/generators/generateSchema.ts",
      "description": "Core logic for generating Zod schemas from JSON Schema."
    },
    "zod-src-generators-literalGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/literalGenerator.ts",
      "description": "Handles 'literal' values in JSON Schema to Zod conversion."
    },
    "zod-src-generators-multipleTypeGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/multipleTypeGenerator.ts",
      "description": "Handles multiple types in JSON Schema to Zod conversion."
    },
    "zod-src-generators-nullGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/nullGenerator.ts",
      "description": "Handles 'null' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-numberGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/numberGenerator.ts",
      "description": "Handles 'number' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-objectGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/objectGenerator.ts",
      "description": "Handles 'object' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-oneOfGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/oneOfGenerator.ts",
      "description": "Handles 'oneOf' keyword in JSON Schema to Zod conversion."
    },
    "zod-src-generators-recordGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/recordGenerator.ts",
      "description": "Handles 'record' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-refGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/refGenerator.ts",
      "description": "Handles '$ref' references in JSON Schema to Zod conversion."
    },
    "zod-src-generators-selectGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/selectGenerator.ts",
      "description": "Handles 'select' keyword in JSON Schema to Zod conversion."
    },
    "zod-src-generators-stringGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/stringGenerator.ts",
      "description": "Handles 'string' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-tupleGenerator": {
      "type": "file",
      "path": "packages/zod/src/generators/tupleGenerator.ts",
      "description": "Handles 'tuple' type in JSON Schema to Zod conversion."
    },
    "zod-src-generators-types": {
      "type": "file",
      "path": "packages/zod/src/generators/types.ts",
      "description": "Type definitions for Zod generators."
    },
    "zod-test-codegen": {
      "type": "file",
      "path": "packages/zod/test/codegen.test.ts",
      "description": "Tests for Zod code generation from JSON Schema."
    },
    "zod-test-collectStandaloneSchemas": {
      "type": "file",
      "path": "packages/zod/test/collectStandaloneSchemas.test.ts",
      "description": "Tests for collecting standalone schemas."
    },
    "zod-test-combination": {
      "type": "file",
      "path": "packages/zod/test/combination.test.ts",
      "description": "Tests for schema combinations (allOf, anyOf, oneOf, etc.)."
    },
    "zod-test-meta": {
      "type": "file",
      "path": "packages/zod/test/meta.test.ts",
      "description": "Tests for meta schema features."
    },
    "zod-test-number": {
      "type": "file",
      "path": "packages/zod/test/number.test.ts",
      "description": "Tests for number type handling."
    },
    "zod-test-object": {
      "type": "file",
      "path": "packages/zod/test/object.test.ts",
      "description": "Tests for object type handling."
    },
    "zod-test-reference": {
      "type": "file",
      "path": "packages/zod/test/reference.test.ts",
      "description": "Tests for $ref reference handling."
    },
    "zod-test-resolveName": {
      "type": "file",
      "path": "packages/zod/test/resolveName.test.ts",
      "description": "Tests for name resolution logic."
    },
    "zod-test-setup": {
      "type": "file",
      "path": "packages/zod/test/setup.ts",
      "description": "Test setup and configuration for Zod tests."
    },
    "zod-test-string": {
      "type": "file",
      "path": "packages/zod/test/string.test.ts",
      "description": "Tests for string type handling."
    },
    "zod-test-test-utils": {
      "type": "file",
      "path": "packages/zod/test/test-utils.ts",
      "description": "Test utilities for Zod tests."
    },
    "zod-test-type": {
      "type": "file",
      "path": "packages/zod/test/type.test.ts",
      "description": "Tests for type inference and validation."
    },
    "zod-test-vitest-dts": {
      "type": "file",
      "path": "packages/zod/test/vitest.d.ts",
      "description": "Type definitions for Vitest in Zod tests."
    },
    "zod-test-snapshots-Example-generated": {
      "type": "file",
      "path": "packages/zod/test/snapshots/Example.generated.ts",
      "description": "Snapshot of generated Zod schema for example case."
    }
  }
}
