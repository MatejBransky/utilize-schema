{
  "name": "utilize-schema-workspace",
  "version": "1.0.0",
  "system_prompt": "You are an expert TypeScript monorepo assistant. Always consider the architectural notes in NOTES.md when answering questions about any part of the codebase. Write code and code comments in English.",
  "vars": {
    "core_root": "packages/core"
  },
  "groups": [
    {
      "name": "end-to-end",
      "system_prompt": "You are working with the core package of a JSON Schema to Zod generator. Always consider the architectural notes in NOTES.md.",
      "data": [
        "notes_md",
        "jsonschema_ts",
        "ast_ts",
        "dereference_ts",
        "dereference_test_ts",
        "linker_ts",
        "linker_test_ts",
        "normalizer_ts",
        "normalizer_test_ts",
        "rules_ts",
        "traverse_ts",
        "traverse_test_ts",
        "utils_ts",
        "utils_test_ts",
        "test_utils_ts",
        "generator_ts",
        "generator_test_ts",
        "parser_ts",
        "zod_test_ts",
        "test_utils_ts_zod",
        "array_test_ts",
        "combination_test_ts",
        "meta_test_ts",
        "number_test_ts",
        "object_test_ts",
        "reference_test_ts",
        "string_test_ts",
        "type_test_ts"
      ]
    },
    {
      "name": "temp",
      "description": "Cloned json-schema-to-typescript-lite implementation for reference and knowledge extraction.",
      "data": [
        "notes_md",

        "temp_index_ts",
        "temp_jsonschema_ts",
        "temp_ast_ts",
        "temp_resolver_ts",
        "temp_linker_ts",
        "temp_validator_ts",
        "temp_normalizer_ts",
        "temp_parser_ts",
        "temp_optimizer_ts",
        "temp_generator_ts",
        "temp_typesofschema_ts",
        "temp_utils_ts",
        "temp_architecture_md",
        "temp_readme_original_md",
        "temp_readme_md"
      ]
    }
  ],
  "data": {
    "notes_md": {
      "type": "file",
      "path": "NOTES.md",
      "description": "Architectural notes, motivation, and feature overview for the entire project. Central document for all packages."
    },
    "jsonschema_ts": {
      "type": "file",
      "path": "${core_root}/src/types/JSONSchema.ts",
      "description": "Type definitions for JSON Schema used throughout the core pipeline."
    },
    "ast_ts": {
      "type": "file",
      "path": "${core_root}/src/types/AST.ts",
      "description": "Type definitions for the Abstract Syntax Tree (AST) representation of schemas."
    },
    "dereference_ts": {
      "type": "file",
      "path": "${core_root}/src/dereference.ts",
      "description": "Dereferencer module: resolves all $ref references in input schemas."
    },
    "dereference_test_ts": {
      "type": "file",
      "path": "${core_root}/test/dereference.test.ts",
      "description": "Tests for dereferencer module."
    },
    "linker_ts": {
      "type": "file",
      "path": "${core_root}/src/linker.ts",
      "description": "Linker module: enhances schema nodes with parent references and breadcrumbs."
    },
    "linker_test_ts": {
      "type": "file",
      "path": "${core_root}/test/linker.test.ts",
      "description": "Tests for linker module."
    },
    "normalizer_ts": {
      "type": "file",
      "path": "${core_root}/src/normalizer.ts",
      "description": "Normalizer module: ensures schema consistency and expands shorthand constructs."
    },
    "normalizer_test_ts": {
      "type": "file",
      "path": "${core_root}/test/normalizer.test.ts",
      "description": "Tests for normalizer module."
    },
    "rules_ts": {
      "type": "file",
      "path": "${core_root}/src/rules.ts",
      "description": "Rules module: contains validation or transformation rules for schema processing."
    },
    "traverse_ts": {
      "type": "file",
      "path": "${core_root}/src/traverse.ts",
      "description": "Traverse module: utilities for traversing schema structures."
    },
    "traverse_test_ts": {
      "type": "file",
      "path": "${core_root}/test/traverse.test.ts",
      "description": "Tests for traverse module."
    },
    "utils_ts": {
      "type": "file",
      "path": "${core_root}/src/utils.ts",
      "description": "Utility functions used throughout the core pipeline."
    },
    "utils_test_ts": {
      "type": "file",
      "path": "${core_root}/test/utils.test.ts",
      "description": "Tests for utility functions."
    },
    "test_utils_ts": {
      "type": "file",
      "path": "${core_root}/test/test-utils.ts",
      "description": "Test utilities for the core package."
    },
    "core_package_json": {
      "type": "file",
      "path": "${core_root}/package.json"
    },
    "generator_ts": {
      "type": "file",
      "path": "packages/zod/src/generator.ts",
      "description": "Zod generator module: generates Zod schemas and TypeScript types from AST nodes."
    },
    "generator_test_ts": {
      "type": "file",
      "path": "packages/zod/test/generator.test.ts",
      "description": "Tests for the Zod generator module."
    },
    "parser_ts": {
      "type": "file",
      "path": "${core_root}/src/parser.ts",
      "description": "Parser module: parses JSON Schema into AST nodes."
    },

    "temp_index_ts": {
      "type": "file",
      "path": "packages/temp/src/index.ts",
      "description": "Legacy entry point for json-schema-to-typescript-lite."
    },
    "temp_jsonschema_ts": {
      "type": "file",
      "path": "packages/temp/src/types/JSONSchema.ts",
      "description": "Legacy JSONSchema type definitions."
    },
    "temp_ast_ts": {
      "type": "file",
      "path": "packages/temp/src/types/AST.ts",
      "description": "Legacy AST type definitions."
    },
    "temp_resolver_ts": {
      "type": "file",
      "path": "packages/temp/src/resolver.ts",
      "description": "Legacy resolver for $ref dereferencing."
    },
    "temp_linker_ts": {
      "type": "file",
      "path": "packages/temp/src/linker.ts",
      "description": "Legacy linker for parent references."
    },
    "temp_validator_ts": {
      "type": "file",
      "path": "packages/temp/src/validator.ts",
      "description": "Legacy schema validator."
    },
    "temp_normalizer_ts": {
      "type": "file",
      "path": "packages/temp/src/normalizer.ts",
      "description": "Legacy schema normalizer."
    },
    "temp_parser_ts": {
      "type": "file",
      "path": "packages/temp/src/parser.ts",
      "description": "Legacy parser from JSONSchema to AST."
    },
    "temp_optimizer_ts": {
      "type": "file",
      "path": "packages/temp/src/optimizer.ts",
      "description": "Legacy AST optimizer."
    },
    "temp_generator_ts": {
      "type": "file",
      "path": "packages/temp/src/generator.ts",
      "description": "Legacy TypeScript code generator."
    },
    "temp_typesofschema_ts": {
      "type": "file",
      "path": "packages/temp/src/typesOfSchema.ts",
      "description": "Legacy schema type matcher."
    },
    "temp_utils_ts": {
      "type": "file",
      "path": "packages/temp/src/utils.ts",
      "description": "Legacy utility functions."
    },
    "temp_architecture_md": {
      "type": "file",
      "path": "packages/temp/ARCHITECTURE.md",
      "description": "Legacy architecture notes."
    },
    "temp_readme_original_md": {
      "type": "file",
      "path": "packages/temp/README.original.md",
      "description": "Legacy original README."
    },
    "temp_readme_md": {
      "type": "file",
      "path": "packages/temp/README.md",
      "description": "Legacy README for json-schema-to-typescript-lite."
    },
    "test_utils_ts_zod": {
      "type": "file",
      "path": "packages/zod/test/test-utils.ts",
      "description": "Test utilities for the Zod package."
    },
    "zod_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/zod.test.ts",
      "description": "Tests for Zod to JSON Schema conversion."
    },
    "array_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/array.test.ts",
      "description": "end-to-end tests for array json schema to zod conversions."
    },
    "combination_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/combination.test.ts",
      "description": "end-to-end tests for schema combination (allof, anyof, oneof) conversions."
    },
    "meta_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/meta.test.ts",
      "description": "end-to-end tests for meta schema properties (title, description, default)."
    },
    "number_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/number.test.ts",
      "description": "end-to-end tests for number json schema to zod conversions."
    },
    "object_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/object.test.ts",
      "description": "end-to-end tests for object json schema to zod conversions."
    },
    "reference_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/reference.test.ts",
      "description": "end-to-end tests for $ref and $defs handling."
    },
    "string_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/string.test.ts",
      "description": "end-to-end tests for string json schema to zod conversions."
    },
    "type_test_ts": {
      "type": "file",
      "path": "packages/zod/test/e2e/type.test.ts",
      "description": "end-to-end tests for type keyword and related conversions."
    }
  }
}
